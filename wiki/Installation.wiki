#labels install,installation,testing,requirements
= Requirements =

We have tried to keep this module as free from dependencies as possible in order to open up the widest possible installation base.

It may, however, be more practical to include some external dependencies in the future. 

(e.g. we pull in and modify the excellent pywebsocket code for handling our browser comms. As the standard emerges it may be better to depend on this directly...)

Anyway, here are the current base system requirements prior to installation:

  * Python 2.5 or newer (2.4 should be OK)
  * Matplotlib 0.99.1.1 or newer

On the browser side the following have been tested:

  * Chrome 5.0.375.70 (OSX, Windows 7, Linux 32-bit/64-bit)
  * Safari 5.0 (On OSX 10.6)
  * Firefox 3.7a6pre (OSX, Windows 7, Linux)

The code now supports both draft-75 and -76 websockets and so should be reasonably future proof (until they change the standard again).

== Netifaces ==

It is surprisingly difficult to make a good guess of the IP address of the the users primary interface across a range of operating systems. The code by default uses gethostbyname which does a reasonable job but is completely borked if you have vmware installed.

If available it will use the netifaces module which does generally do a better job. It is recommended that you easy install this as a requirement.

= Installation =

Download the tarball or check out the source code:
{{{
sudo python setup.py install
}}}

= Testing =

We provide a number of examples for initial testing. Surprisingly these are found in the ./examples directory.

The names are self explanatory. The URL of the management server should be printed out by the script, and if a web browser is installed and available a new tab should be opened in your browser. If not then just copy and paste the management URL into a browser window.

== Conformance Testing ==

To try and reach a level of reasonable conformance we have a crude test suite that will run against a directory of matplotlib examples and produce a web page for side by side comparison.

{{{
cd ./tests
python test.py -d ~/installs/matplotlib-0.99.1.1/lib/mpl_examples/pylab_examples
}}}

This produces output files in the ./tests/output directory. The file test.html we viewed in a web browser will show the H5 canvas implementation alongside a .png and .svg for each file in the target directory. 

Be aware that these test results can be pretty massive and may well lead to browser instability. You can run on a restricted set of tests by using a wildcard parameter (see test.py --help)

There is also the option of rendering each canvas on the page to a png for easier side by side comparison. To do this run 
{{{python rec.py}}} 
once you have a completed test run. At the bottom of the test.html page click the "Connect" button. Then click the "Put Images to Server" button. The rec.py instance should indicate a variety of files being written to disk. Then open the test_rendered.html page which will have a side by side column of png's.